---
- name: Install authbind
  apt:
    name: authbind

# https://superuser.com/questions/710253/allow-non-root-process-to-bind-to-port-80-and-443#892391
- name: Allow non-root process to bind to web ports
  file:
    path: '{{item}}'
    state: touch
    mode: '0777'
  with_items:
    - /etc/authbind/byport/80
    - /etc/authbind/byport/443

- name: Copy Python requirements file into place
  copy:
    src: requirements.txt
    dest: '{{home_dir}}'

- name: Install Python dependencies
  pip:
    requirements: '{{home_dir}}/requirements.txt'
    # Some of Buildbot's dependencies may already be present on the base system
    # but at an incompatible version. Ignore any previously-installed packages
    # to ensure that the speciic versions required by Buildbot are always
    # installed.
    extra_args: --ignore-installed

- name: Create a directory to store the build master's data
  file:
    path: '{{data_storage_mount_point}}'
    state: directory
    owner: '{{application_user}}'
    group: '{{application_group}}'

- include_tasks: data_storage_device.yml
  when: data_storage_device is not none

# When individual "chunks" fail in a given collection attempt, the data
# collected from successful "chunks" will persist on disk. In some cases, a
# human operator may manually intervene to trigger the failed build and
# "rescue" the overall collection attempt. Rescuing is not always appropriate,
# so left unchecked, the system will accumulate partial results from collection
# attempts that will never be recovered. This task schedules a cron job to
# remove any data sets that are older than 30 days since it is highly unlikely
# that such results will be rescued.
- name: Schedule job to remove partial results from failed collections
  cron:
    name: Remove partial results from failed collections
    hour: 1
    job: /usr/bin/find {{data_storage_mount_point}}/chunk-results . -maxdepth 1 -mtime +30 -exec rm -r {} +

- name: Create a Buildbot master
  command: |
    sudo --user {{application_user}} \
        buildbot create-master {{home_dir}}/master
  args:
    chdir: '{{home_dir}}'
    creates: '{{home_dir}}/master'
  register: create_master

- name: Insert configuration file defining GNU/Linux-based Buildbot workers
  template:
    src: workers.json.j2
    owner: '{{application_user}}'
    group: '{{application_group}}'
    dest: '{{home_dir}}/master/workers-linux.json'
  vars:
    template_workers: '{{groups.get("buildbot-linux-workers")}}'
  notify:
    - Reload "build master" service

- name: Insert configuration file defining macOS-based Buildbot workers
  template:
    src: workers.json.j2
    owner: '{{application_user}}'
    group: '{{application_group}}'
    dest: '{{home_dir}}/master/workers-macos.json'
  vars:
    template_workers: '{{groups.get("buildbot-macos-workers")}}'
  notify:
    - Reload "build master" service

- name: Create directory to store configuration
  file:
    path: '{{home_dir}}/master/configuration'
    state: directory
    owner: '{{application_user}}'
    group: '{{application_group}}'
    mode: 0700

- name: Infer revision of deployed codebase
  local_action: command git rev-parse HEAD
  become: false
  register: results_collector_revision

- name: Insert configuration values
  copy:
    content: '{{item.value}}'
    dest: '{{home_dir}}/master/configuration/{{item.name}}'
    owner: '{{application_user}}'
    group: '{{application_group}}'
    mode: 0700
  with_items:
    - name: oauth_github_client_id
      value: '{{oauth_github_client_id}}'
    - name: oauth_github_client_secret
      value: '{{oauth_github_client_secret}}'
    - name: oauth_github_org_pattern
      value: '{{oauth_github_org_pattern}}'
    - name: fqdn
      value: '{{fqdn}}'
    - name: data_storage_mount_point
      value: '{{data_storage_mount_point}}'
    - name: wptd_upload_url
      value: '{{wptd_upload_url}}'
    - name: wptd_staging_upload_url
      value: '{{wptd_staging_upload_url}}'
    - name: wptd_upload_user_name
      value: '{{wptd_upload_user_name}}'
    - name: wptd_upload_secret
      value: '{{wptd_upload_secret}}'
    - name: results_collector_revision
      value: '{{results_collector_revision.stdout}}'

# Some deployments may not include any workers which are capable of running
# tests in remote browsers. Because Ansible will fail if the "shell" module is
# used with an empty string, insert a no-op command to ensure this task always
# has some content.
- name: Insert credentials for running remote browsers
  shell: |
    true
    {% for worker_host in groups['buildbot-linux-workers'] %}
      {% if hostvars[worker_host].sauce_labs_key %}
        filename={{home_dir}}/master/configuration/sauce_labs_key_{{hostvars[worker_host].application_user}}
        echo {{hostvars[worker_host].sauce_labs_key}} > $filename
        chown {{application_user}}:{{application_group}} $filename
        chmod 0700 $filename
      {% endif %}
    {% endfor %}

- name: Copy Buildbot configuration files into place
  copy:
    src: ../../src/master/
    dest: '{{home_dir}}/master'
    owner: '{{application_user}}'
    group: '{{application_group}}'
  notify:
    - Reload "build master" service

# This is a workaround for a known bug in Buildbot:
# "Confusing error message when the database is missing or empty"
# https://github.com/buildbot/buildbot/issues/2885
- name: Upgrade Buildbot master
  command: |
    sudo --user {{application_user}} \
        buildbot upgrade-master {{home_dir}}/master
  args:
    chdir: '{{home_dir}}'
  when: create_master.changed

- name: Define a system service
  template:
    src: buildbot-master.service.j2
    dest: /etc/systemd/system/buildbot-master.service
  notify:
    - Reload "build master" service

- name: Enable and start "build master" system service
  systemd:
    name: buildbot-master
    enabled: true
    state: started

- name: Install script for mirroring browser binaries
  copy:
    src: ../../src/scripts/get-binary-url.py
    dest: /usr/local/bin/get-binary-url.py
    mode: 0755

- name: Install script for uploading results
  copy:
    src: ../../src/scripts/upload-wpt-results.py
    dest: /usr/local/bin/upload-wpt-results.py
    mode: 0755

- name: Install script for selecting WPT revision
  copy:
    src: ../../src/scripts/get-wpt-revision.py
    dest: /usr/local/bin/get-wpt-revision.py
    mode: 0755
