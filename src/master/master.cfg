# -*- python -*-
# ex: set filetype=python:

# Copyright 2018 The WPT Dashboard Project. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from functools import partial
import json
import os

from buildbot.plugins import *

from wpt_chunked_step import WPTChunkedStep
from wpt_detect_complete_step import WptDetectCompleteStep
from wpt_run_step import WptRunStep
import temp_dir

# Workers may be simultaneously assigned to a Local Builds and a Remote Build.
# When run in the default configuration, the WPT CLI will always bind to the
# same TCP/IP ports, making it impossible to execute tests in parallel. While
# this issue could be resolved by using customized configuration, such an
# approach further complicates the environment and increases the potential for
# error. Instead, ensure that workers only perform one build at any given time
# using a Buildbot "worker lock".
worker_port_lock = util.WorkerLock('worker port')
# In order to facilitate parallelization (and limit the effect of random
# failures), the full suite of tests defined by WPT is factored into distinct
# segments. Thess numbers define the number of segments that should be created.
chunk_counts = {
    'remote': 100,
    'local': 20
}
# The following object stores are defined via this project's Terraform
# configuration.
buckets = {
    'results': 'wptd',
    'browsers': 'browsers'
}
max_attempts = 3
git_branch = 'master'

workers = []
with open('workers-linux.json') as handle:
    workers_linux = json.load(handle)

    workernames_linux = [w['name'] for w in workers_linux]
    workernames_remote_enabled = [
        w['name'] for w in workers_linux if w['remote_enabled']
    ]

    workers.extend(workers_linux)

with open('workers-macos.json') as handle:
    workers_macos = json.load(handle)

    workernames_macos = [w['name'] for w in workers_macos]

    workers.extend(workers_macos)

platform_manifest = None
with open('browsers.json') as handle:
    platform_manifest = json.load(handle)

c = BuildmasterConfig = {}

configuration_file_dir = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), 'configuration'
)

def read_configuration_file(filename):
    with open(os.path.join(configuration_file_dir, filename)) as handle:
        return handle.read()

c['secretsProviders'] = [
    secrets.SecretInAFile(dirname=configuration_file_dir)
]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.LocalWorker('buildmaster'),
  ] + [worker.Worker(w['name'], w['password']) for w in workers]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol. 'port' must match
# the value configured into the workers (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = [
    changes.GitPoller('git://github.com/w3c/web-platform-tests.git',
                      workdir='gitpoller-workdir',
                      branch=git_branch,
                      pollAtLaunch=True,
                      pollInterval=300)
]

@util.renderer
def render_chunked_builder(properties):
    if properties.getProperty('use_sauce_labs'):
        return ['Remote Chunked Runner']

    os_name = properties.getProperty('os_name')
    remote = properties.getProperty('remote')

    if os_name == 'macos' and not remote:
        return ['macOS Chunked Runner']

    return ['GNU/Linux Chunked Runner']

@util.renderer
def is_safari(properties):
    return properties.getProperty('browser_name') == 'safari'

@util.renderer
def is_local_safari(properties):
    return (properties.getProperty('browser_name') == 'safari' and
            not properties.getProperty('use_sauce_labs'))

@util.renderer
def is_local_safari_stable(properties):
    return (properties.getProperty('browser_name') == 'safari' and
            properties.getProperty('browser_channel') == 'stable' and
            not properties.getProperty('use_sauce_labs'))


c['schedulers'] = [
  schedulers.Triggerable(name='chunked',
                         builderNames=render_chunked_builder),
  schedulers.Triggerable(name='upload',
                         builderNames=['Uploader']),
  schedulers.Nightly(name='Daily (remote builds)',
                     builderNames=['Chunk Initiator'],
                     onlyIfChanged=False,
                     properties={
                         'interval': 'daily',
                         'remote': True,
                         'worker_os': 'linux'
                     },
                     hour=[12],
                     minute=[5]),
  schedulers.Nightly(name='Four times per day (local GNU/Linux builds)',
                     builderNames=['Chunk Initiator'],
                     onlyIfChanged=False,
                     properties={
                         'interval': 'six_hourly',
                         'remote': False,
                         'worker_os': 'linux'
                     },
                     hour=[0, 6, 12, 18],
                     minute=[5]),
  schedulers.Nightly(name='Daily (local macOS builds)',
                     builderNames=['Chunk Initiator'],
                     onlyIfChanged=False,
                     properties={
                         'interval': 'daily',
                         'remote': False,
                         'worker_os': 'macos'
                     },
                     hour=[0],
                     minute=[5])
]

locate_steps = []
chunked_steps = []

def filter_build(platform_os, platform_remote, step):
    props = step.build.properties

    if platform_remote != props.getProperty('remote'):
        return False

    if platform_remote:
        return props.getProperty('worker_os') == 'linux'
    else:
        return props.getProperty('worker_os') == platform_os

for spec_id, spec in platform_manifest.iteritems():
    total_chunks = chunk_counts['remote' if spec.get('remote') else 'local']
    doStepIf = partial(filter_build, spec.get('os_name'), spec.get('remote'))
    browser_name = spec.get('browser_name')
    browser_channel = spec.get('browser_channel')
    is_safari_stable = browser_name == 'safari' and browser_channel == 'stable'
    should_install_browser = not spec.get('remote') and not is_safari_stable

    if should_install_browser:
        name=str('Find installer for %s@%s' % (browser_name, browser_channel))
        locate_steps.append(
            steps.SetPropertyFromCommand(name=name,
                                         command=[
                                             'get-binary-url.py',
                                             '--browser_name', browser_name,
                                             '--channel', browser_channel,
                                             '--application', 'browser',
                                             '--os-name', spec.get('os_name'),
                                             '--bucket-name', buckets['browsers']
                                         ],
                                         property='browser_url_%s_%s' % (
                                             spec.get('browser_name'),
                                             spec.get('browser_channel')
                                         ),
                                         haltOnFailure=True,
                                         doStepIf=doStepIf)
        )

        if browser_name == 'safari':
            steps.SetProperty(property='webdriver_url_safari',
                              hideStepIf=True,
                              value='n/a (bundled with browser)')
        else:
            name=str('Find installer for %s WebDriver' % (browser_name))
            locate_steps.append(
                steps.SetPropertyFromCommand(name=name,
                                             command=[
                                                 'get-binary-url.py',
                                                 '--browser_name', browser_name,
                                                 '--channel', 'stable',
                                                 '--application', 'webdriver',
                                                 '--os-name', spec.get('os_name'),
                                                 '--bucket-name', buckets['browsers']
                                             ],
                                             property='webdriver_url_%s' % (
                                                 spec.get('browser_name')
                                             ),
                                             haltOnFailure=True,
                                             doStepIf=doStepIf)
            )

    chunked_steps.append(WPTChunkedStep(schedulerNames=['chunked'],
                                        platform_id=spec_id,
                                        platform=spec,
                                        doStepIf=doStepIf,
                                        sourceStamp={
                                            # The `codebase` property must be
                                            # set in order for this build step
                                            # to function. It is currently
                                            # undocumented:
                                            # https://github.com/buildbot/buildbot/issues/4281
                                            'codebase': u'',
                                            'branch': None,
                                            'repository': u'',
                                            'revision': util.Property('announced_revision')
                                        },
                                        total_chunks=total_chunks))

trigger_factory = util.BuildFactory(
    [
        # Query the wpt.fyi "revision announcer" prior to triggering chunked
        # runs.  This ensures that the all chunks use the same revision of WPT
        # (by setting the Buildbot property named `revision`), including when
        # failed builds are manually re-tried via the web interface.
        steps.SetPropertyFromCommand(name='Identify revision',
                                     command=[
                                         'get-wpt-revision.py',
                                         '--retry-interval', '60',
                                         '--retry-timeout', '600',
                                         util.Property('interval')
                                     ],
                                     property='announced_revision',
                                     haltOnFailure=True)
    ] +
    locate_steps +
    chunked_steps
)

chunk_result_dir_name = util.Interpolate('/'.join([
    read_configuration_file('data_storage_mount_point'), 'chunk-results',
    '%(prop:revision)s', '%(prop:platform_id)s'
]))
chunk_result_file_name = util.Interpolate('/'.join([
    read_configuration_file('data_storage_mount_point'), 'chunk-results',
    '%(prop:revision)s', '%(prop:platform_id)s',
    '%(prop:this_chunk)s_of_%(prop:total_chunks)s.json'
]))

# Retrieve the minimal amount of repository information necessary to check out
# the revision under test.
minimal_checkout = [
    steps.ShellCommand(name='Clear build directory',
                       command=['find', '.', '-mindepth', '1', '-delete'],
                       haltOnFailure=True),
    steps.ShellCommand(name='Initialize git repository',
                       command=['git', 'init'],
                       haltOnFailure=True),
    steps.ShellCommand(name='Fetch the WPT revision under test',
                       command=[
                          'git',
                          'fetch',
                          '--depth', '1',
                          # The tag for the current revision must be available
                          # so that the WPT CLI can locate the corresponding
                          # pre-generated test manifest file. In the absence of
                          # the tag, the CLI will fall back to generating the
                          # manifest. Manifest generation is a memory-intensive
                          # task which may exceed the capabilities of the
                          # Buildbot worker.
                          '--tags',
                          'git://github.com/w3c/web-platform-tests',
                          util.Property('revision')
                       ],
                       haltOnFailure=True),
    steps.ShellCommand(name='Check out the WPT revision under test',
                       command=[
                          'git', 'checkout', util.Property('revision')
                       ],
                       haltOnFailure=True)
]

chunked_factory = util.BuildFactory(
    minimal_checkout + [
    temp_dir.CreateStep(name='Create temporary directory'),
    steps.SetPropertyFromCommand(name='Collect the required hosts',
                                 property='hosts_contents',
                                 command=['./wpt', 'make-hosts-file']),
    steps.ShellCommand(name='Set the required hosts file',
                       command=['sudo', 'extend-hosts.py', '/etc/hosts'],
                       initialStdin=util.Property('hosts_contents'),
                       haltOnFailure=True),
    steps.ShellCommand(name='Trust the root certificate',
                       command=['sudo', 'trust-root-ca.sh', './tools/certs/cacert.pem'],
                       haltOnFailure=True,
                       doStepIf=is_local_safari),
    steps.ShellCommand(name='Disable macOS popup blocker',
                       command=['safari-disable-popup-blocker.sh'],
                       haltOnFailure=True,
                       doStepIf=is_local_safari),
    steps.SetProperties(properties={
                            'log_wptreport': temp_dir.prefix('report.json'),
                            'log_raw': temp_dir.prefix('log-raw.txt'),
                            'max_attempts': max_attempts
                       }),
    steps.SetPropertyFromCommand(name=util.Interpolate('Install %(prop:browser_name)s'),
                                 property='browser_binary',
                                 command=['sudo', 'install-browser.sh',
                                          util.Property('browser_name'),
                                          util.Property('browser_url')],
                                 haltOnFailure=True,
                                 doStepIf=lambda step: step.build.properties.getProperty('browser_url')),
    steps.ShellCommand(name='Enable Safari Experimental Features',
                       command=['safari-enable-experimental-features.sh'],
                       haltOnFailure=True,
                       doStepIf=is_safari),
    steps.SetProperty(property='browser_binary',
                      value='/Applications/Safari.app/Contents/MacOS/Safari',
                      doStepIf=is_local_safari_stable,
                      hideStepIf=True),
    steps.SetPropertyFromCommand(name=util.Interpolate('Install %(prop:browser_name)s WebDriver'),
                                 property='webdriver_binary',
                                 command=['install-webdriver.sh',
                                          util.Property('browser_name'),
                                          util.Property('webdriver_url')],
                                 haltOnFailure=True,
                                 doStepIf=lambda step: step.build.properties.getProperty('webdriver_url')),
    steps.SetPropertyFromCommand(name='Enable remote automation in Apple Safari',
                                 property='webdriver_binary',
                                 command=['sudo', 'safari-enable-automation.sh',
                                          util.Property('browser_channel')],
                                 haltOnFailure=True,
                                 doStepIf=is_local_safari),
    steps.SetPropertyFromCommand(name='Read browser version',
                                 property='browser_version',
                                 command=['read-browser-version.py',
                                          '--browser-name',
                                          util.Property('browser_name'),
                                          '--binary',
                                          util.Property('browser_binary')],
                                 haltOnFailure=True,
                                 doStepIf=lambda step: step.build.properties.getProperty('browser_binary')),
    WptRunStep(haltOnFailure=True, lazylogfiles=True),
    steps.MasterShellCommand(name='Create results directory on build master',
                             command=['mkdir', '-p', chunk_result_dir_name]),
    steps.FileUpload(name='Upload results to build master',
                     workersrc=temp_dir.prefix('report.json'),
                     masterdest=chunk_result_file_name),
    temp_dir.RemoveStep(name='Remove local copy of results', alwaysRun=True),
    WptDetectCompleteStep(name='Trigger upload to Google Cloud Platform',
                          schedulerNames=['upload'],
                          dir_name=chunk_result_dir_name,
                          set_properties={
                              'platform_id': util.Property('platform_id'),
                              'browser_name': util.Property('browser_name'),
                              'browser_channel': util.Property('browser_channel'),
                              'browser_version': util.Property('browser_version'),
                              'os_name': util.Property('os_name'),
                              'os_version': util.Property('os_version'),
                              'total_chunks': util.Property('total_chunks'),
                              'use_sauce_labs': util.Property('use_sauce_labs')
                          }),
    steps.ShellCommand(name='Clear build directory',
                       command=['find', '.', '-mindepth', '1', '-delete'],
                       alwaysRun=True),
    steps.ShellCommand(name='Schedule graceful shutdown',
                       command=['touch',
                                util.Interpolate('/home/%(prop:workername)s/worker/shutdown.stamp')],
                       doStepIf=lambda step: step.worker.name in workernames_linux,
                       alwaysRun=True)

])

# The WPT CLI has facilities for detecting the version of the browser under
# test, but these are not available in all contexts.
@util.renderer
def override_platform(properties):
    # The WPT CLI cannot interrogate remote browsers for their version
    if properties.getProperty('use_sauce_labs'):
        return 'true'

    # The WPT CLI does not implement the logic necessary to infer the version
    # of the stable release of Safari. The CLI *is* capable of inferring the
    # version of Safari Technology Preview, however:
    # https://github.com/web-platform-tests/wpt/pull/13467
    if (properties.getProperty('browser_name') == 'safari' and
        properties.getProperty('browser_channel') == 'stable'):
        return 'true'

    return 'false'

upload_factory = util.BuildFactory([
    # This step is implemented as a `ShellCommand` rather than a
    # `MasterShellCommand` because the latter does not yet honor the Buildbot
    # "secrets" API. See:
    # https://github.com/buildbot/buildbot/issues/4008
    steps.ShellCommand(name='Upload results to results receiver',
                             command=[
                                 'upload-wpt-results.py',
                                 '--raw-results-directory', chunk_result_dir_name,
                                 '--product', util.Property('browser_name'),
                                 '--browser-channel', util.Property('browser_channel'),
                                 '--browser-version', util.Property('browser_version'),
                                 '--os', util.Property('os_name'),
                                 '--os-version', util.Property('os_version'),
                                 '--url', read_configuration_file('wptd_upload_url'),
                                 '--user-name', read_configuration_file('wptd_upload_user_name'),
                                 # This value is emitted using
                                 # `util.Interpolate` rather than `util.Secret`
                                 # in order to work around the following bug in
                                 # Buildbot:
                                 # https://github.com/buildbot/buildbot/issues/4008
                                 '--secret', util.Interpolate('%(secret:wptd_upload_secret)s'),
                                 '--override-platform', override_platform,
                                 '--total-chunks', util.Property('total_chunks'),
                                 '--git-branch', git_branch
                             ],
                             workdir='../../..',
                             haltOnFailure=True),
    # This step is implemented as a `ShellCommand` rather than a
    # `MasterShellCommand` because the latter does not yet honor the Buildbot
    # "secrets" API. See:
    # https://github.com/buildbot/buildbot/issues/4008
    steps.ShellCommand(name='Upload results to results receiver (staging)',
                             command=[
                                 'upload-wpt-results.py',
                                 '--raw-results-directory', chunk_result_dir_name,
                                 '--product', util.Property('browser_name'),
                                 '--browser-channel', util.Property('browser_channel'),
                                 '--browser-version', util.Property('browser_version'),
                                 '--os', util.Property('os_name'),
                                 '--os-version', util.Property('os_version'),
                                 '--url', read_configuration_file('wptd_staging_upload_url'),
                                 '--user-name', read_configuration_file('wptd_upload_user_name'),
                                 # This value is emitted using
                                 # `util.Interpolate` rather than `util.Secret`
                                 # in order to work around the following bug in
                                 # Buildbot:
                                 # https://github.com/buildbot/buildbot/issues/4008
                                 '--secret', util.Interpolate('%(secret:wptd_upload_secret)s'),
                                 '--override-platform', override_platform,
                                 '--total-chunks', util.Property('total_chunks'),
                                 '--git-branch', git_branch
                             ],
                             workdir='../../..',
                             haltOnFailure=True),
    steps.MasterShellCommand(name='Remove local copy of uploaded results',
                             command=[
                                 'rm', '--recursive', chunk_result_dir_name
                             ])
])


c['builders'] = [
    util.BuilderConfig(name='GNU/Linux Chunked Runner',
                       workernames=workernames_linux,
                       factory=chunked_factory,
                       locks=[worker_port_lock.access('exclusive')]),
    util.BuilderConfig(name='Remote Chunked Runner',
                       workernames=workernames_remote_enabled,
                       factory=chunked_factory,
                       locks=[worker_port_lock.access('exclusive')]),
    util.BuilderConfig(name='macOS Chunked Runner',
                       workernames=workernames_macos,
                       factory=chunked_factory,
                       locks=[worker_port_lock.access('exclusive')]),
    util.BuilderConfig(name='Chunk Initiator',
                       workernames=['buildmaster'],
                       factory=trigger_factory),
    # This Builder only concerns data that is available on the Build Master
    # machine, so there is no need to occupy a dedicated worker to perform it.
    util.BuilderConfig(name='Uploader',
                       workernames=['buildmaster'],
                       factory=upload_factory)
]

# Do not collapse jobs
# https://github.com/buildbot/buildbot/issues/3472
c['collapseRequests'] = False

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Web Platform Tests Dashboard'
c['titleURL'] = 'https://wpt.fyi'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://%s/' % read_configuration_file('fqdn')

c['www'] = {
    'port': 80,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {}
    },
    'auth': util.GitHubAuth(
        read_configuration_file('oauth_github_client_id'),
        read_configuration_file('oauth_github_client_secret')
    ),
    'versions': [
        ('results-collector', read_configuration_file('results_collector_revision'))
    ],
    'authz': util.Authz(
        stringsMatcher = util.reStrMatcher,
        allowRules=[
            util.AnyControlEndpointMatcher(
                role=read_configuration_file('oauth_github_org_pattern')
            )
        ],
        roleMatchers=[util.RolesFromGroups()]
    )
}

####### DB URL

c['db'] = {
    'db_url' : 'sqlite:///%s/buildbot-state.sqlite' % (
        read_configuration_file('data_storage_mount_point')
    )
}
