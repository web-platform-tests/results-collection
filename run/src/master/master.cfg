# -*- python -*-
# ex: set filetype=python:

# Copyright 2018 The WPT Dashboard Project. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from functools import partial
import json
import os

from buildbot.plugins import *

from wpt_chunked_step import WPTChunkedStep
from wpt_detect_complete_step import WptDetectCompleteStep
from wpt_run_step import WptRunStep
import temp_dir

# The Sauce Labs service supports a limited number of concurrent connections.
# The number of workers which are eligible to perform these builds should be
# limited in order to avoid rate limiting.
sauce_labs_lock = util.MasterLock('sauce labs', maxCount=4)
# Workers may be simultaneously assigned to a Local Builds and a Remote Build.
# When run in the default configuration, the WPT CLI will always bind to the
# same TCP/IP ports, making it impossible to execute tests in parallel. While
# this issue could be resolved by using customized configuration, such an
# approach further complicates the environment and increases the potential for
# error. Instead, ensure that workers only perform one build at any given time
# using a Buildbot "worker lock".
worker_port_lock = util.WorkerLock('worker port')
# In order to facilitate parallelization (and limit the effect of random
# failures), the full suite of tests defined by WPT is factored into distinct
# segments. This number defines the number of segments that should be created.
total_chunks = 100

workers = None
with open('workers.json') as handle:
    workers = json.load(handle)
workernames = [w['name'] for w in workers]

platform_manifest = None
with open('browsers.json') as handle:
    platform_manifest = json.load(handle)

c = BuildmasterConfig = {}

configuration_file_dir = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), 'configuration'
)

def read_configuration_file(filename):
    with open(os.path.join(configuration_file_dir, filename)) as handle:
        return handle.read()

c['secretsProviders'] = [
    secrets.SecretInAFile(dirname=configuration_file_dir)
]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.LocalWorker('buildmaster'),
  ] + [worker.Worker(w['name'], w['password']) for w in workers]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol. 'port' must match
# the value configured into the workers (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = [
    changes.GitPoller('git://github.com/w3c/web-platform-tests.git',
                      workdir='gitpoller-workdir',
                      branch='master',
                      pollAtLaunch=True,
                      pollInterval=300)
]

@util.renderer
def render_chunked_builder(properties):
    if properties.getProperty('use_sauce_labs'):
        return ['Remote Chunked Runner']

    return ['Local Chunked Runner']

c['schedulers'] = [
  schedulers.Triggerable(name='chunked',
                         builderNames=render_chunked_builder),
  schedulers.Triggerable(name='upload',
                         builderNames=['Uploader']),
  schedulers.Nightly(name='Bi-daily (slow builds)',
                     builderNames=['Chunk Initiator'],
                     onlyIfChanged=False,
                     properties={'build_speed': 'slow'},
                     dayOfMonth=range(0, 31, 2),
                     hour=0),
  schedulers.Nightly(name='Semi-daily (fast builds)',
                     builderNames=['Chunk Initiator'],
                     onlyIfChanged=False,
                     properties={'build_speed': 'fast'},
                     hour=[0, 6, 12, 18])
]

chunked_steps = []

def filter_build(speed, step):
    return speed == step.build.properties.getProperty('build_speed')

for spec_id, spec in platform_manifest.iteritems():
    if spec.get('currently_run') != True:
        continue

    speed = 'slow' if spec.get('sauce') else 'fast'

    chunked_steps.append(WPTChunkedStep(schedulerNames=['chunked'],
                                        platform_id=spec_id,
                                        platform=spec,
                                        doStepIf=partial(filter_build, speed),
                                        total_chunks=total_chunks))

trigger_factory = util.BuildFactory(
    [
        # Fetch the latest version of `master` prior to triggering chunked
        # runs.  This ensures that the all chunks use the same revision of WPT
        # (by setting the Buildbot property named `revision`), including when
        # failed builds are manually re-tried via the web interface.
        steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
        # The commit date is required by the external web service which is
        # notified when new result sets are available online. That information
        # is captured by this builder so that the worker responsible for
        # reporting does not need a local copy of the WPT repository.
        steps.SetPropertyFromCommand(name='Retrieve commit date of latest revision',
                                     command=['git', 'log', '-1', '--format=%cd', '--date=iso-strict'],
                                     property='revision_date')
    ] +
    chunked_steps
)

chunk_result_dir_name = util.Interpolate('/'.join([
    '..', 'chunk-results', '%(prop:revision)s', '%(prop:browser_name)s'
]))
chunk_result_file_name = util.Interpolate('/'.join([
    '..', 'chunk-results', '%(prop:revision)s', '%(prop:browser_name)s',
    '%(prop:this_chunk)s_of_%(prop:total_chunks)s.json'
]))
chunked_factory = util.BuildFactory([
    steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
    temp_dir.CreateStep(name='Create temporary directory'),
    steps.SetPropertyFromCommand(name='Collect the required hosts',
                                 property='hosts_contents',
                                 command=['./wpt', 'make-hosts-file']),
    steps.ShellCommand(name='Set the required hosts file',
                       command=['sudo', 'extend-hosts.py', '/etc/hosts'],
                       initialStdin=util.Property('hosts_contents'),
                       haltOnFailure=True),
    steps.SetProperties(properties={
                            'log_wptreport': temp_dir.prefix('report.json'),
                            'log_raw': temp_dir.prefix('log-raw.txt')
                       }),
    # In the context of the WPT Dashboard, the correctness/completeness of a
    # given web browser does not dictate the success ofa build. Successful
    # builds will usually include failed Web Platform Tests.
    WptRunStep(flunkOnFailure=False),
    # While the report for an individual "chunk" may fail to meet the project's
    # completeness criteria, the sum total of all "chunks" combined may still
    # be sufficient. In recognition of this possibility, report validation
    # failure does not prevent uploading to the build master.
    steps.ShellCommand(name='Validate results',
                       command=['validate-wpt-results.py',
                                '--log-wptreport', util.Property('log_wptreport'),
                                '--log-raw', util.Property('log_raw')]),
    steps.MasterShellCommand(name='Create results directory on build master',
                             command=['mkdir', '-p', chunk_result_dir_name]),
    steps.FileUpload(name='Upload results to build master',
                     workersrc=temp_dir.prefix('report.json'),
                     masterdest=chunk_result_file_name),
    temp_dir.RemoveStep(name='Remove local copy of results', alwaysRun=True),
    steps.ShellCommand(name='Remove temporary browser files',
                       command=['find', '/tmp', '-maxdepth', '1', '(',
                                '-name', '*mozrunner', '-o',
                                '-name', 'GeckoChildCrash*.extra', '-o',
                                '-name', 'rust_mozprofile.*', '-o',
                                '-name', '*Chromium*', '-o',
                                '-name', '*Chrome*', ')',
                                '-exec', 'rm', '-rf', '{}', '+', '-print'],
                       alwaysRun=True),
    WptDetectCompleteStep(name='Trigger upload to Google Cloud Platform',
                          schedulerNames=['upload'],
                          set_properties={
                              'platform_id': util.Property('platform_id'),
                              'browser_name': util.Property('browser_name'),
                              'browser_version': util.Property('browser_version'),
                              'os_name': util.Property('os_name'),
                              'os_version': util.Property('os_version'),
                              'revision_date': util.Property('revision_date')
                          })
])

upload_factory = util.BuildFactory([
    # This step is implemented as a `ShellCommand` rather than a
    # `MasterShellCommand` because the latter does not yet honor the Buildbot
    # "secrets" API. See:
    # https://github.com/buildbot/buildbot/issues/4008
    steps.ShellCommand(name='Upload results to Google Cloud Platform',
                             command=[
                                 'upload-wpt-results.py',
                                 '--raw-results-directory', chunk_result_dir_name,
                                 '--platform-id', util.Property('platform_id'),
                                 '--browser-name', util.Property('browser_name'),
                                 '--browser-version', util.Property('browser_version'),
                                 '--os-name', util.Property('os_name'),
                                 '--os-version', util.Property('os_version'),
                                 '--wpt-revision', util.Property('revision'),
                                 '--wpt-revision-date', util.Property('revision_date'),
                                 '--bucket-name', 'wptd',
                                 '--notify-url', read_configuration_file('wptd_notify_url'),
                                 # This valid is emitted using
                                 # `util.Interpolate` rather than `util.Secret`
                                 # in order to work around the following bug in
                                 # Buildbot:
                                 # https://github.com/buildbot/buildbot/issues/4008
                                 '--notify-secret', util.Interpolate('%(secret:wptd_notify_secret)s')
                             ],
                             workdir='../../..',
                             haltOnFailure=True),
    steps.MasterShellCommand(name='Remove local copy of uploaded results',
                             command=[
                                 'rm', '--recursive', chunk_result_dir_name
                             ])
])


c['builders'] = [
    util.BuilderConfig(name='Local Chunked Runner',
                       workernames=workernames,
                       factory=chunked_factory,
                       locks=[worker_port_lock.access('exclusive')]),
    util.BuilderConfig(name='Remote Chunked Runner',
                       workernames=workernames,
                       factory=chunked_factory,
                       locks=[sauce_labs_lock.access('counting'),
                              worker_port_lock.access('exclusive')]),
    util.BuilderConfig(name='Chunk Initiator',
                       workernames=['buildmaster'],
                       factory=trigger_factory),
    # This Builder only concerns data that is available on the Build Master
    # machine, so there is no need to occupy a dedicated worker to perform it.
    util.BuilderConfig(name='Uploader',
                       workernames=['buildmaster'],
                       factory=upload_factory)
]

# Do not collapse jobs
# https://github.com/buildbot/buildbot/issues/3472
c['collapseRequests'] = False

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Web Platform Tests Dashboard'
c['titleURL'] = 'https://wpt.fyi'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://%s/' % read_configuration_file('fqdn')

c['www'] = {
    'port': 80,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {}
    },
    'auth': util.GitHubAuth(
        read_configuration_file('oauth_github_client_id'),
        read_configuration_file('oauth_github_client_secret')
    ),
    'authz': util.Authz(
        stringsMatcher = util.reStrMatcher,
        allowRules=[
            util.AnyControlEndpointMatcher(
                role=read_configuration_file('oauth_github_org_pattern')
            )
        ],
        roleMatchers=[util.RolesFromGroups()]
    )
}

####### DB URL

c['db'] = {
    'db_url' : 'sqlite:///%s/buildbot-state.sqlite' % (
        read_configuration_file('db_mount_point')
    )
}
